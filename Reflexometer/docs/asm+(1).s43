#include "msp430.h"                     ; #define controlled include file
        
        ORG 0FFECh
        DC16 TIMER_A0_Interrupt
        
        ORG 0FFE8h
        DW PORT1_isr
        
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        mov.w   #49999,&TACCR0            ; Period for up mode
        mov.w   #CCIE,&TACCTL0            ; Enable interrupts on Compare 0

        MOV.B   #BIT3, P1IE
        MOV.B   #BIT3, P1IES
        mov.b   #0, P1IFG

        mov.w   #MC_1|ID_0|TASSEL_2|TACLR,&TACTL
        bis.w   #GIE,SR              

        BIS.B   #0xFF ,&P2DIR 
        MOV.B   #0, P2OUT
        mov #0, R11
        mov #8, R14
        
        
        JMP $                           ; jump to current location '$'
      
                                

random:
        inc R13
        mov #0, R10
        bit.b #2, R13
        jz pomin2
        inc R10
        inc R10
pomin2:
        bit.b #1, R13
        jz pomin1
        inc R10
pomin1:
        cmp.b R10, R12
        jeq random
        RET



TIMER_A0_Interrupt:
        cmp #8, R14
        jeq skip
        cmp #0, R14
        jeq skip
        inc R11
skip:
        mov.b R11,R13
        RETI



PORT1_isr:
        cmp #8, R14
        jeq start
        cmp #0, R14
        jeq koncz
        bit.b #3, R10
        jz guzik3
        bit.b #2, R10
        jz guzik2
        bit.b #1, R10
        jz guzik1
        bit.b #0, R10
        jz guzik0
guzik3:
        bit.b #BIT3, P4IN
        jnz olejlampki
        jmp lampki
guzik2:
        bit.b #BIT2, P4IN
        jnz olejlampki
        jmp lampki
guzik1:
        bit.b #BIT1, P4IN
        jnz olejlampki
        jmp lampki
guzik0:
        bit.b #BIT0, P4IN
        jnz olejlampki
        jmp lampki
        
lampki:
        call #zmienlampki
olejlampki:
        mov.b #0, P1IFG
        RETI
start:
        call #zmienlampki
        mov.b #0, P1IFG
        RETI
koncz:
        mov.b #0, P2OUT
        mov.b #0, P1IFG
        mov.b R11, R4
        RRA R4
        RRA R4
        RRA R4
        call #number_to_7_segment
        RETI
        
zmienlampki:
        dec R14
        call #random
        mov.b R10, R12
        bit.b #3, R10
        jz lampki3
        bit.b #2, R10
        jz lampki2
        bit.b #1, R10
        jz lampki1
        jmp lampki0
lampki3
        mov.b #192, P2OUT    
        RET
lampki2:
        mov.b #48, P2OUT  
        RET
lampki1:
        mov.b #12, P2OUT  
        RET
lampki0:
        mov.b #3, P2OUT    
        RET
        
number_to_7_segment:
        PUSH R4
        PUSH R5
        PUSH R6
        PUSH R7
        MOV #0,R7
        MOV #0,R5
        MOV R4,R6
decimal_loop:
        CMP #10,R6
        JNC  display
        ADD #10, R5
        INC R7
        SUB #10, R6
        JMP decimal_loop     
display:        
        SUB R5,R4
        RLA R7
        RLA R7
        RLA R7
        RLA R7
        ADD R7,R4
        MOV.B R4, P2OUT
        POP R7
        POP R6
        POP R5
        POP R4
        RET


        
        END

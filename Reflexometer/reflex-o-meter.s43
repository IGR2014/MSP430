#include "msp430.h"                     ; #define controlled include file
        
        ORG     0FFECh
        DC16    Timer_irq
        
        ORG     0FFE8h
        DW      Button_irq
        
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        BIS.B   #0xFF, &P2DIR
        MOV.B   #0, P2OUT
        MOV     #0, R11
        MOV     #8, R14

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD, &WDTCTL ; Stop watchdog timer
        MOV.W   #1000, &TACCR0          ; Period for up mode
        MOV.W   #CCIE, &TACCTL0         ; Enable interrupts on Compare 0
        MOV.W   #MC_1|ID_3|TASSEL_2|TACLR, &TACTL
        MOV.B   #BIT3, P1IE
        MOV.B   #BIT3, P1IES
        MOV.B   #BIT3, P1IFG
        BIS.W   #GIE, SR
        JMP $                           ; jump to current location '$'

; Random number
random:
        INC     R13
        MOV     #0, R10
        BIT.B   #2, R13
        JZ      two
        ADD     #2, R10
two:
        BIT.B   #1, R13
        JZ      one
        INC     R10
one:
        CMP.B   R10, R12
        JEQ     random
        RET

; Timer irq
Timer_irq:
        CMP     #8, R14
        JEQ     skip
        CMP     #0, R14
        JEQ     skip
        INC     R11
skip:
        MOV.B   R11, R13
        BIC.W   #CCIFG, &TACCTL0
        RETI

; Button irq
Button_irq:
        CMP     #8, R14
        JEQ     start
        CMP     #0, R14
        JEQ     stop
        BIT.B   #0, R10
        JZ      button0
        BIT.B   #1, R10
        JZ      button1
        BIT.B   #2, R10
        JZ      button2
        BIT.B   #3, R10
        JZ      button3
        RETI
button0:
        BIT.B   #BIT0, P4IN
        JNZ     output_leds
        JMP     leds
button1:
        BIT.B   #BIT1, P4IN
        JNZ     output_leds
        JMP     leds
button2:
        BIT.B   #BIT2, P4IN
        JNZ     output_leds
        JMP     leds
button3:
        BIT.B   #BIT3, P4IN
        JNZ     output_leds
        JMP     leds

; LEDs processing
leds:
        CALL    #update_leds
output_leds:
        MOV.B   #0, P1IFG
        RETI
start:
        CALL    #update_leds
        MOV.B   #0, P1IFG
        RETI
stop:
        MOV.B   #0, P2OUT
        MOV.B   #0, P1IFG
        MOV.B   R11, R4
        RRA     R4
        RRA     R4
        RRA     R4
        CALL    #number_to_7_segment
        RETI

; LEDs update
update_leds:
        DEC     R14
        CALL    #random
        MOV.B   R10, R12
        BIT.B   #3, R10
        JZ      led3
        BIT.B   #2, R10
        JZ      led2
        BIT.B   #1, R10
        JZ      led1
led0:
        MOV.B   #3, P2OUT    
        RET
led1:
        MOV.B   #12, P2OUT  
        RET
led2:
        MOV.B   #48, P2OUT  
        RET
led3
        MOV.B   #192, P2OUT    
        RET

; Digit to 7-seg display
number_to_7_segment:
        PUSH    R4
        PUSH    R5
        PUSH    R6
        PUSH    R7
        MOV     #0, R7
        MOV     #0, R5
        MOV     R4, R6
decimal_loop:
        CMP     #10, R6
        JNC     display
        ADD     #10, R5
        INC     R7
        SUB     #10, R6
        JMP     decimal_loop     
display:        
        SUB     R5, R4
        RLA     R7
        RLA     R7
        RLA     R7
        RLA     R7
        ADD     R7, R4
        MOV.B   R4, P2OUT
        POP     R7
        POP     R6
        POP     R5
        POP     R4
        RET

        END
